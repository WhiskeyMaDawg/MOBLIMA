package project.controller;
import project.model.Customer.Customer.ageEnum;
import java.util.ArrayList;

import src.database.*;
import src.database.FileType;
import src.helper.*;
import src.model.*;
import src.model.enums.AgeGroup;
import src.model.enums.LayoutType;
import src.model.enums.SeatType;

/**
 * BookingController is a class designed to control the various view classes
 *
 */
public class BookingManager {
  /**
   * Gets and @return list of {@link Booking}
   */
  private static ArrayList<Booking> getBookingList() {
    ArrayList<Booking> bookingList = new ArrayList<Booking>();
    for (Booking booking : Database.BOOKINGS.values()) {
      bookingList.add(booking);
    }
    return bookingList;
  }

  /**
   * Creates transaction ID for {@link Booking} with @param seat of the booking
   * @return the corresponding TID for the {@link Booking}
   */
  public static String createTransactionId(Seat seat) {
    String cinemacode = seat.getShowtime().getCinema().getCinemaCode(); // assigned location to String
    String timeShow = Helper.getTimeNow();
    timeShow = formatDate(timeShow);

    String tID = cinemacode + timeShow;
    /*
     * formats the transaction id as XXXYYYYMMDDhhmm (Y : year, M : month, D : day,
     * h : hour, m : minutes, XX : cinema code in letters)
     */
    return tID;
  }

  /**
   * @return computed ticket price based on different factors @param price @param cinema @param seat @param movieGoer
   */
  public static double computePrice(double price, Cinema cinema, Seat seat, MovieGoer movieGoer) {
    double adjustedPrice;
    double multiplier = 1.07; //GST-accounted

    // Child & Senior Citizen 50% cheaper
    if (movieGoer.getAgeGroup() == AgeEnum.CHILD) multiplier*=0.5;
    else if (movieGoer.getAgeGroup() == AgeEnum.SENIOR || movieGoer.getAgeGroup() == AgeEnum.STUDENT) {
      multiplier *= 0.75;
    }

    // formats date to yyyy-MM-dd to match format in HOLIDAY database
    String formattedDate = seat.getShowtime().getTime().substring(0, 10);
    if (Database.HOLIDAYS.contains(formattedDate))
      multiplier *= 1.25; // 25% surcharge for holiday
    else if (Helper.checkIsTimeNight(seat.getShowtime().getTime()))
      multiplier *= 1.15; // 15% surcharge for night time
    else if (Helper.checkIsDateWeekend(seat.getShowtime().getTime()))
      multiplier *=1.2; //20% surcharge for weekend


    adjustedPrice = price * multiplier;

    if (seat.getSeatType() == SeatType.ULTIMA) {
      adjustedPrice += 2;
    } else if (seat.getSeatType() == SeatType.ELITE) {
      adjustedPrice += 3;
    } else if (seat.getSeatType() == SeatType.COUPLE) {
      adjustedPrice += 4;
    }

    // extra $5 for platinum cinema
    if (cinema.getIsPlatinum()) {
      adjustedPrice += 5;
    }

    return adjustedPrice;
  }

  public static Ticket createBookingTicket(Showtime showtime, ArrayList<Seat> seat, MovieGoer movieGoer) {
    double total = 0;
    double individualPrice;
    for (int i = seat.size()-1; i >= 0; i--) {
      individualPrice = computePrice(showtime.getMovie().getPrice(), showtime.getCinema(), seat.get(i), movieGoer);
      total += individualPrice;
    }

    return new Ticket(showtime, total, seat);
  }


  public static void createBooking(Ticket ticket, MovieGoer movieGoer) {
    ArrayList<Booking> list = BookingManager.getBookingList();
    String newTId = createTransactionId(ticket.getSeat().get(0));
    ticket.setIsPaid(true);
    Booking newBooking = new Booking(newTId, ticket, movieGoer, ticket.getSeat());
    Database.BOOKINGS.put(newTId, newBooking);
    Database.saveFileIntoDatabase(FileType.BOOKINGS);
    list.add(newBooking);
    System.out.println("\nBooking created! Your ticket is printed below: ");
    printBookingDetails(newBooking);
  }


  protected static String getAllSeatsInString(Ticket ticket) {
    String s = new String();;
    for (int i = 0; i < ticket.getSeat().size(); i++) {
      s += ticket.getSeat().get(i).getPosition();
      s += " ";
    }
    return s;
  }


  protected static String getAllSeatsTypeInString(Ticket ticket) {
    String s = new String();
    for (int i = 0; i < ticket.getSeat().size(); i++) {
      s += ticket.getSeat().get(i).getSeatType().getLabel();
      s += " ";
    }
    return s;
  }


  public static void printBookingDetails(Booking booking) {
    MovieGoer movieGoer = booking.getMovieGoer();
    System.out.println();
    System.out.println(String.format("%-30s", ""));
    System.out.println(String.format("%-15s: %s", "Transaction ID", booking.getTransactionId()));
    System.out.println(String.format("%-15s: %s", "Name", movieGoer.getName()));
    System.out.println(String.format("%-15s: +65 %s", "Mobile Number", movieGoer.getMobile()));
    System.out.println(String.format("%-15s: %s", "Email", movieGoer.getEmail()));
    System.out.println(String.format("%_30s"));
    System.out
        .println(String.format("%-15s: %s", "Time", booking.getTicket().getSeat().get(0).getShowtime().getTime()));
    System.out.println(String.format("%-15s: %s", "Ticket Type", movieGoer.getAgeGroup().getLabel()));
    System.out.println(
        String.format("%-15s: %s", "Movie Type", booking.getTicket().getShowtime().getMovie().getType().getLabel()));
    System.out
        .println(String.format("%-15s: %s", "Movie Title", booking.getTicket().getShowtime().getMovie().getTitle()));
    System.out
        .println(String.format("%-15s: %s", "Cinema", booking.getTicket().getShowtime().getCinema().getCinemaCode()));
    System.out.println(String.format("%-15s: %s", "Cinema Type",
        booking.getTicket().getShowtime().getCinema().getIsPlatinum() ? "Platinum" : "Not Platinum"));
    System.out.println(
        String.format("%-15s: %s", "Location", booking.getTicket().getShowtime().getCinema().getCineplex().getLabel()));
    System.out.println(String.format("%-15s: %s", "Seat(s)", BookingManager.getAllSeatsInString(booking.getTicket())));
    System.out
        .println(String.format("%-15s: %s", "Seat Type", BookingManager.getAllSeatsTypeInString(booking.getTicket())));
    System.out.println(String.format("%-15s: $%s", "Price", Helper.df2.format(booking.getTicket().getPrice())));
    System.out
        .println(String.format("%-15s: %s", "Status", booking.getTicket().getIsPaid() ? "Paid" : "Ready for Payment"));
    System.out.println(String.format("%_30s", ""));
    System.out.println();
  }

  public static void printTicketDetails(Ticket ticket, MovieGoer movieGoer) {
    System.out.println();
    System.out.println(String.format("%-30s", "").replace(" ", "-"));
    System.out.println(String.format("%-15s: %s", "Name", movieGoer.getName()));
    System.out.println(String.format("%-15s: +65 %s", "Mobile Number", movieGoer.getMobile()));
    System.out.println(String.format("%-15s: %s", "Email", movieGoer.getEmail()));
    System.out.println(String.format("%-15s: %s", "Time", ticket.getShowtime().getTime()));
    System.out.println(String.format("%_30s"));
    System.out.println(String.format("%-15s: %s", "Ticket Type", movieGoer.getAgeGroup().getLabel()));
    System.out.println(String.format("%-15s: %s", "Movie Type", ticket.getShowtime().getMovie().getType()));
    System.out.println(String.format("%-15s: %s", "Movie Title", ticket.getShowtime().getMovie().getTitle()));
    System.out.println(String.format("%-15s: %s", "Cinema", ticket.getShowtime().getCinema().getCinemaCode()));
    System.out.println(
        String.format("%-15s: %s", "Cinema Type",
            ticket.getShowtime().getCinema().getIsPlatinum() ? "Platinum" : "Not Platinum"));
    System.out
        .println(String.format("%-15s: %s", "Location", ticket.getShowtime().getCinema().getCineplex().getLabel()));
    System.out.println(String.format("%-15s: %s", "Seat(s)", BookingManager.getAllSeatsInString(ticket)));
    System.out.println(String.format("%-15s: %s", "Seat Type", BookingManager.getAllSeatsTypeInString(ticket)));
    System.out.println(String.format("%-15s: $%s", "Price", Helper.df2.format(ticket.getPrice())));
    System.out.println(String.format("%-15s: %s", "Status", ticket.getIsPaid() ? "Paid" : "Ready for Payment"));
    System.out.println(String.format("%-30s", "").replace(" ", "-"));
    System.out.println();
  }


  public static MovieGoer promptUserDetails() {
    System.out.print("\nEnter your name: ");
    String name = Helper.readString();
    System.out.print("Enter your mobile number (eg: 88889770): +65 ");
    String mobile = Helper.readString();
    System.out.print("Enter your email: ");
    String email = Helper.readString();

    System.out.print("Enter your age: ");
    int age = Helper.readInt(1, 100);
    AgeEnum ageGroup;
    if (age >= 55) {
      ageGroup = AgeEnum.SENIOR;
    } else if (age >= 18) {
      ageGroup = AgeEnum.ADULT;
    } else if (age >= 7) {
      ageGroup = AgeEnum.STUDENT;
    } 
    else {
      ageGroup = AgeEnum.CHILD;
    }

    MovieGoer newMovieGoer = new MovieGoer(email, name, mobile, email, ageGroup, "test", false);
    return newMovieGoer;
  }

  public static String formatDate(String date) {
    date = date.replaceAll("-", "");
    date = date.replace(" ", "");
    date = date.replaceAll(":", "");
    return date;
  }


  public static void findBooking(String email) {
    ArrayList<Booking> curList = BookingManager.getBookingList();
    ArrayList<Booking> myList = new ArrayList<Booking>();
    for (int i = 0; i < curList.size(); i++) {
      if (curList.get(i).getMovieGoer().getEmail().equals(email)) {
        myList.add(curList.get(i));
      }
    }
    if (myList.size() == 0) {
      System.out.println("\nNo booking is found!");
    } else {
      System.out.println("Booking History:");
      for (int i = 0; i < myList.size(); i++) {
        BookingManager.printBookingDetails(myList.get(i));
      }
    }
    Helper.pressAnyKeyToContinue();
  }

  protected static Seat promptSeat(Showtime showtime, ArrayList<Seat> seat) {
    ShowtimeManager.displayShowtimeLayout(showtime, seat);
    String position;
    int row = 0;
    int col = 0;
    LayoutType layout = showtime.getLayoutType();
    do {
      System.out.println("Please enter the desired seat coordinates (e.g A6): ");
      position = Helper.readString();
      row = ShowtimeManager.getSeatRow(position);
      col = Integer.parseInt(position.substring(1));
      if (row >=0 && col>=0 && col != 5 && col != 14 && col <= 19) {
        break;
      }
      System.out.println("\nInvalid row and column!");
    } while (col == 5 || col == 14 || row < 0 || col < 0 || col > 20);
    switch (layout){
      case LARGE:
        if (position.equals("K1") || position.equals("K2")) {
          showtime.getSeatAt(11, 1).setPosition("K1");
          showtime.getSeatAt(11, 2).setPosition("K2");
        } else if (position.equals("K3") || position.equals("K4")) {
          showtime.getSeatAt(11, 3).setPosition("K3");
          showtime.getSeatAt(11, 4).setPosition("K4");
        } else {
          showtime.getSeatAt(row + 1, col).setPosition(position);
        }
        break;
      case MEDIUM:
        if (position.equals("I1") || position.equals("I2")) {
          showtime.getSeatAt(9, 1).setPosition("I1");
          showtime.getSeatAt(9, 2).setPosition("I2");
        } else if (position.equals("I3") || position.equals("I4")) {
          showtime.getSeatAt(9, 3).setPosition("I3");
          showtime.getSeatAt(9, 4).setPosition("I4");
        } else {
          showtime.getSeatAt(row + 1, col).setPosition(position);
        }
        break;
      case SMALL:
        if (position.equals("G1") || position.equals("G2")) {
          showtime.getSeatAt(7, 1).setPosition("G1");
          showtime.getSeatAt(7, 2).setPosition("G2");
        } else if (position.equals("G3") || position.equals("G4")) {
          showtime.getSeatAt(7, 3).setPosition("G3");
          showtime.getSeatAt(7, 4).setPosition("G4");
        } else {
          showtime.getSeatAt(row + 1, col).setPosition(position);
        }
        break;
    }

    return showtime.getSeatAt(row + 1, col);
  }


  public static void promptBooking(String showtimeId, String username) {
    ArrayList<Seat> seatList = new ArrayList<Seat>();
    Seat newSeat;
    int option = -1;
    Showtime showtime = ShowtimeManager.getShowtimebyId(showtimeId);
    LayoutType layout = showtime.getLayoutType();
    do {
      do {
        newSeat = promptSeat(showtime, seatList);
        if (newSeat.getBooked() || seatList.contains(newSeat)) {
          System.out.println("The selected seat is booked or selected!!");
        }
      } while (newSeat.getBooked() || seatList.contains(newSeat));
      switch(layout){
        case LARGE:
          if (newSeat.getPosition().equals("K1") || newSeat.getPosition().equals("K2")) {
            Seat couple1 = showtime.getSeatAt(11, 1);
            Seat couple2 = showtime.getSeatAt(11, 2);
            System.out.println("\n" + couple1.getSeatType().getLabel() + " Seat " + couple1.getPosition() + " & "
                + " Seat " + couple2.getPosition() + " selected...");
            seatList.add(couple1);
            seatList.add(couple2);
          } else if (newSeat.getPosition().equals("K3") || newSeat.getPosition().equals("K4")) {
            Seat couple1 = showtime.getSeatAt(11, 3);
            Seat couple2 = showtime.getSeatAt(11, 4);
            System.out.println("\n" + couple1.getSeatType().getLabel() + " Seat " + couple1.getPosition() + " & "
                + " Seat " + couple2.getPosition() + " selected...");
            seatList.add(couple1);
            seatList.add(couple2);
          } else {
            System.out.println("\n Seat " + newSeat.getSeatType().getLabel() + " Seat " + newSeat.getPosition() + " selected...");
            seatList.add(newSeat);
          }
          break;
        case MEDIUM:
          if (newSeat.getPosition().equals("I1") || newSeat.getPosition().equals("I2")) {
            Seat couple1 = showtime.getSeatAt(9, 1);
            Seat couple2 = showtime.getSeatAt(9, 2);
            System.out.println("\n" + couple1.getSeatType().getLabel() + " Seat " + couple1.getPosition() + " & "
                + " Seat " + couple2.getPosition() + " selected...");
            seatList.add(couple1);
            seatList.add(couple2);
          } else if (newSeat.getPosition().equals("I3") || newSeat.getPosition().equals("I4")) {
            Seat couple1 = showtime.getSeatAt(9, 3);
            Seat couple2 = showtime.getSeatAt(9, 4);
            System.out.println("\n" + couple1.getSeatType().getLabel() + " Seat " + couple1.getPosition() + " & "
                + " Seat " + couple2.getPosition() + " selected...");
            seatList.add(couple1);
            seatList.add(couple2);
          } else {
            System.out.println("\n" + newSeat.getSeatType().getLabel() + " Seat " + newSeat.getPosition() + " selected...");
            seatList.add(newSeat);
          }
          break;
        case SMALL:
          if (newSeat.getPosition().equals("G1") || newSeat.getPosition().equals("G2")) {
            Seat couple1 = showtime.getSeatAt(7, 1);
            Seat couple2 = showtime.getSeatAt(7, 2);
            System.out.println("\n" + couple1.getSeatType().getLabel() + " Seat " + couple1.getPosition() + " & "
                + " Seat " + couple2.getPosition() + " selected...");
            seatList.add(couple1);
            seatList.add(couple2);
          } else if (newSeat.getPosition().equals("G3") || newSeat.getPosition().equals("G4")) {
            Seat couple1 = showtime.getSeatAt(7, 3);
            Seat couple2 = showtime.getSeatAt(7, 4);
            System.out.println("\n" + couple1.getSeatType().getLabel() + " Seat " + couple1.getPosition() + " & "
                + " Seat " + couple2.getPosition() + " selected...");
            seatList.add(couple1);
            seatList.add(couple2);
          } else {
            System.out.println("\n" + newSeat.getSeatType().getLabel() + " Seat " + newSeat.getPosition() + " selected...");
            seatList.add(newSeat);
          }
          break;
      }

      System.out.println("(1) Select another seat");
      System.out.println("(2) Proceed to payment");
      option = Helper.readInt(1, 2);
    } while (option != 2);

    MovieGoer newMovieGoer = username.equals("") ? promptUserDetails()
        : (MovieGoer) UserManager.getUser(username);

    Ticket newTicket = createBookingTicket(showtime, seatList, newMovieGoer);
    printTicketDetails(newTicket, newMovieGoer);

    System.out.println("(1) Confirm Payment");
    System.out.println("(2) Back");
    System.out.print("Which would you like to do: ");

    int pay;
    pay = Helper.readInt(1, 2);
    switch (pay) {
      case 1:
        for (int i = 0; i < newTicket.getSeat().size(); i++) {
          if (BookingManager.bookSeat(newTicket.getSeat().get(i), showtime)) {
            System.out.println("\n" + newTicket.getSeat().get(i).getSeatType().getLabel() + " Seat "
                + newTicket.getSeat().get(i).getPosition() + " has been booked!");
          }
        }
        createBooking(newTicket, newMovieGoer);
        updateTicketSales(showtime, newTicket);
        break;
      case 2:
        System.out.println("Booking failed!");
        break;
      default:
        break;
    }

    Helper.pressAnyKeyToContinue();
  }

  protected static boolean bookSeat(Seat seat, Showtime showtime) {
    showtime.getSeatAt(seat.getRow() + 1, seat.getCol() + 1).setBooked(true);
    Database.SHOWTIME.put(showtime.getShowtimeId(), showtime);
    Database.saveFileIntoDatabase(FileType.SHOWTIME);
    return true;
  }


  protected static boolean updateTicketSales(Showtime showtime, Ticket ticket) {
    Movie movie = showtime.getMovie();
    int newSales = ticket.getSeat().size();
    movie.setTicketSales(movie.getTicketSales() + newSales);
    Database.MOVIES.put(movie.getMovieId(), movie);
    Database.saveFileIntoDatabase(FileType.MOVIES);
    return true;
  }

  public static void handleCheckBooking(String username) {
    String email;
    if (username.equals("")) {
      System.out.print("Enter your email: ");
      email = Helper.readString();
    } else {
      MovieGoer currentUser = (MovieGoer) UserManager.getUser(username);
      email = currentUser.getEmail();
    }
    BookingManager.findBooking(email);
  }
}

